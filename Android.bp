// If you're looking for ART global stuff, please see build/Android.bp.

package {
    default_visibility: ["//art:__subpackages__"],
    default_applicable_licenses: ["art_license"],
}

license {
    name: "art_license",
    visibility: [":__subpackages__"],
    license_kinds: [
        "SPDX-license-identifier-Apache-2.0",
        "SPDX-license-identifier-BSD",
    ],
    license_text: [
        "NOTICE",
    ],
}

// art/build/Android.bp
cc_defaults {
    // Additional flags are computed by art.go

    name: "art_defaults",

    // This is the default visibility for the //art package, but we repeat it
    // here so that it gets merged with other visibility rules in modules
    // extending these defaults.
    visibility: ["//art:__subpackages__"],

    cflags: [
        // Base set of cflags used by all things ART.
        "-fno-rtti",
        "-ggdb3",
        "-Wall",
        "-Werror",
        "-Wextra",
        "-Wstrict-aliasing",
        "-fstrict-aliasing",
        "-Wunreachable-code",
        "-Wredundant-decls",
        "-Wshadow",
        "-Wunused",
        "-fvisibility=protected",

        // Warn about thread safety violations with clang.
        "-Wthread-safety",
        // TODO(b/144045034): turn on -Wthread-safety-negative
        //"-Wthread-safety-negative",

        // Warn if switch fallthroughs aren't annotated.
        "-Wimplicit-fallthrough",

        // Enable float equality warnings.
        "-Wfloat-equal",

        // Enable warning of converting ints to void*.
        "-Wint-to-void-pointer-cast",

        // Enable warning of wrong unused annotations.
        "-Wused-but-marked-unused",

        // Enable warning for deprecated language features.
        "-Wdeprecated",

        // Enable warning for unreachable break & return.
        "-Wunreachable-code-break",
        "-Wunreachable-code-return",

        // Disable warning for use of offsetof on non-standard layout type.
        // We use it to implement OFFSETOF_MEMBER - see macros.h.
        "-Wno-invalid-offsetof",

        // Enable inconsistent-missing-override warning. This warning is disabled by default in
        // Android.
        "-Winconsistent-missing-override",

        // Enable thread annotations for std::mutex, etc.
        "-D_LIBCPP_ENABLE_THREAD_SAFETY_ANNOTATIONS",
    ],

    arch: {
        x86: {
            avx2: {
                cflags: [
                    "-mavx2",
                    "-mfma",
                ],
            },
        },
        x86_64: {
            avx2: {
                cflags: [
                    "-mavx2",
                    "-mfma",
                ],
            },
        },
    },

    target: {
        android: {
            cflags: [
                // To use oprofile_android --callgraph, uncomment this and recompile with
                //    mmma -j art
                // "-fno-omit-frame-pointer",
                // "-marm",
                // "-mapcs",
            ],
        },
        linux: {
            cflags: [
                // Enable missing-noreturn only on non-Mac. As lots of things are not implemented for
                // Apple, it's a pain.
                "-Wmissing-noreturn",
            ],
        },
        linux_bionic: {
            strip: {
                // Do not strip art libs when building for linux-bionic.
                // Otherwise we can't get any symbols out of crashes.
                none: true,
            },
        },
        darwin: {
            enabled: false,
        },
        windows: {
            // When the module is enabled globally in the soong_config_variables
            // stanza above, it may get enabled on windows too for some module
            // types. Hence we need to disable it explicitly.
            // TODO(b/172480617): Clean up with that.
            enabled: false,
        },
        host: {
            cflags: [
                // Bug: 15446488. We don't omit the frame pointer to work around
                // clang/libunwind bugs that cause SEGVs in run-test-004-ThreadStress.
                "-fno-omit-frame-pointer",
            ],
        },
        // The build assumes that all our x86/x86_64 hosts (such as buildbots and developer
        // desktops) support at least sse4.2/popcount. This firstly implies that the ART
        // runtime binary itself may exploit these features. Secondly, this implies that
        // the ART runtime passes these feature flags to dex2oat and JIT by calling the
        // method InstructionSetFeatures::FromCppDefines(). Since invoking dex2oat directly
        // does not pick up these flags, cross-compiling from a x86/x86_64 host to a
        // x86/x86_64 target should not be affected.
        linux_x86: {
            cflags: [
                "-msse4.2",
                "-mpopcnt",
            ],
        },
        linux_x86_64: {
            cflags: [
                "-msse4.2",
                "-mpopcnt",
            ],
        },
    },
}

// art/build/Android.bp
cc_defaults {
    name: "art_debug_defaults",
    defaults: ["art_defaults"],
    visibility: ["//art:__subpackages__"],
    cflags: [
        "-DDYNAMIC_ANNOTATIONS_ENABLED=1",
        "-DVIXL_DEBUG",
        "-UNDEBUG",
    ],
    asflags: [
        "-UNDEBUG",
    ],
    target: {
        // This has to be duplicated for android and host to make sure it
        // comes after the -Wframe-larger-than warnings inserted by art.go
        // target-specific properties
        android: {
            cflags: ["-Wno-frame-larger-than="],
        },
        host: {
            cflags: ["-Wno-frame-larger-than="],
        },
    },
}

cc_defaults {
    name: "art_module_source_build_defaults",
    defaults_visibility: [
        "//art:__subpackages__",
        "//libcore:__subpackages__",
        "//libnativehelper:__subpackages__",
    ],
    enabled: false,
    target: {
        windows: {
            // Windows is disabled by default, but if we set enabled:true
            // globally above we need to disable it explicitly.
            enabled: false,
        },
    },
}

java_defaults {
    name: "art_module_source_build_java_defaults",
    defaults_visibility: [
        "//art:__subpackages__",
        "//libcore:__subpackages__",
        "//libnativehelper:__subpackages__",
    ],
    enabled: false,
    target: {
        windows: {
            enabled: false,
        },
    },
}

genrule_defaults {
    name: "art_module_source_build_genrule_defaults",
    defaults_visibility: [
        "//art:__subpackages__",
        "//libcore:__subpackages__",
        "//libnativehelper:__subpackages__",
    ],
    enabled: false,
    target: {
        windows: {
            enabled: false,
        },
    },
}

prebuilt_defaults {
    name: "art_module_source_build_prebuilt_defaults",
    defaults_visibility: [
        "//art:__subpackages__",
        "//libcore:__subpackages__",
        "//libnativehelper:__subpackages__",
    ],
    enabled: false,
    target: {
        windows: {
            enabled: false,
        },
    },
}

// linux适配,libnativehelper需要cts相关设置移到这里,懒得增加模块
// cts/Android.bp
java_defaults {
    name: "cts_error_prone_rules",
    errorprone: {
        javacflags: [
            // Set of error prone rules to ensure code quality
            // When updating this list, also update error_prone_rules.mk
            "-Xep:ArrayToString:ERROR",
            "-Xep:BoxedPrimitiveConstructor:ERROR",
            "-Xep:ConstantField:ERROR",
            "-Xep:EqualsIncompatibleType:ERROR",
            "-Xep:FormatString:ERROR",
            "-Xep:GetClassOnClass:ERROR",
            "-Xep:IdentityBinaryExpression:ERROR",
            "-Xep:JUnit3TestNotRun:ERROR",
            "-Xep:JUnit4ClassUsedInJUnit3:ERROR",
            "-Xep:JUnitAmbiguousTestClass:ERROR",
            "-Xep:MissingFail:ERROR",
            "-Xep:MissingOverride:ERROR",
            "-Xep:Overrides:ERROR",
            "-Xep:ReferenceEquality:ERROR",
            "-Xep:RemoveUnusedImports:ERROR",
            "-Xep:ReturnValueIgnored:ERROR",
            "-Xep:SelfEquals:ERROR",
            "-Xep:SizeGreaterThanOrEqualsZero:ERROR",
            "-Xep:TryFailThrowable:ERROR",
        ],
    },
}

java_defaults {
    name: "cts_error_prone_rules_tests",
    errorprone: {
        javacflags: [
            // Set of error prone rules to ensure code quality of tests
            // Goal is to eventually merge with cts_error_prone_rules
            // When updating this list, also update error_prone_rules_tests.mk
            "-Xep:ArrayToString:ERROR",
            "-Xep:CollectionIncompatibleType:ERROR",
            "-Xep:EqualsIncompatibleType:ERROR",
            "-Xep:EqualsNaN:ERROR",
            "-Xep:FormatString:ERROR",
            "-Xep:IdentityBinaryExpression:ERROR",
            "-Xep:JUnit3TestNotRun:ERROR",
            "-Xep:JUnit4ClassUsedInJUnit3:ERROR",
            "-Xep:JUnitAmbiguousTestClass:ERROR",
            "-Xep:MissingFail:ERROR",
            "-Xep:SizeGreaterThanOrEqualsZero:ERROR",
            "-Xep:TryFailThrowable:ERROR",
        ],
    },
}

// Used with an android_test / android_test_helper_app, this is equivalent to
// BUILD_CTS_SUPPORT_PACKAGE
java_defaults {
    name: "cts_support_defaults",
    defaults: ["cts_error_prone_rules_tests"],
    dex_preopt: {
        enabled: false,
    },
    optimize: {
        enabled: false,
    },
}

// Used with different module types, this is equivalent to:
//   android_test: BUILD_CTS_PACKAGE
//   java_library: BUILD_CTS_TARGET_JAVA_LIBRARY
//   java_library_host: BUILD_CTS_HOST_JAVA_LIBRARY
java_defaults {
    name: "cts_defaults",
    defaults_visibility: [
        "//libnativehelper/tests_mts",
    ],
    defaults: ["cts_support_defaults"],
    // target: {
    //     android: {
    //         static_libs: ["platform-test-annotations"],
    //     },
    // },
}

java_defaults {
    name: "mts-target-sdk-version-current",
    target_sdk_version: "10000",
}

// linu适配,soong需要adb相关设置
// packages/modules/adb/Android.bp
tidy_errors = [
    "-*",
    "bugprone-inaccurate-erase",
    "bugprone-use-after-move",
]

cc_defaults {
    name: "adb_defaults",

    cflags: [
        "-Wall",
        "-Wextra",
        "-Werror",
        "-Wexit-time-destructors",
        "-Wno-non-virtual-dtor",
        "-Wno-unused-parameter",
        "-Wno-missing-field-initializers",
        "-Wthread-safety",
        "-Wvla",
        "-DADB_HOST=1",         // overridden by adbd_defaults
        "-DANDROID_BASE_UNIQUE_FD_DISABLE_IMPLICIT_CONVERSION=1",
    ],
    cpp_std: "experimental",

    use_version_lib: true,
    compile_multilib: "first",

    target: {
        darwin: {
            host_ldlibs: [
                "-lpthread",
                "-framework CoreFoundation",
                "-framework IOKit",
                "-framework Security",
                "-lobjc",
            ],
            cflags: [
                // Required, to use the new IPv6 Sockets options introduced by RFC 3542.
                "-D__APPLE_USE_RFC_3542",
            ],
        },

        windows: {
            cflags: [
                // Define windows.h and tchar.h Unicode preprocessor symbols so that
                // CreateFile(), _tfopen(), etc. map to versions that take wchar_t*, breaking the
                // build if you accidentally pass char*. Fix by calling like:
                //   std::wstring path_wide;
                //   if (!android::base::UTF8ToWide(path_utf8, &path_wide)) { /* error handling */ }
                //   CreateFileW(path_wide.c_str());
                "-DUNICODE=1",
                "-D_UNICODE=1",

                // Unlike on Linux, -std=gnu++ doesn't set _GNU_SOURCE on Windows.
                "-D_GNU_SOURCE",

                // MinGW hides some things behind _POSIX_SOURCE.
                "-D_POSIX_SOURCE",

                // libusb uses __stdcall on a variadic function, which gets ignored.
                "-Wno-ignored-attributes",

                // Not supported yet.
                "-Wno-thread-safety",
            ],

            host_ldlibs: [
                "-lws2_32",
                "-lgdi32",
                "-luserenv",
                "-liphlpapi",
            ],
        },
    },

    tidy: true,
    tidy_checks: tidy_errors,
    tidy_checks_as_errors: tidy_errors,
}

cc_defaults {
    name: "adbd_defaults",
    defaults: ["adb_defaults"],
    defaults_visibility: [
        "//build/bazel/examples/soong_config_variables"
    ],
    cflags: ["-UADB_HOST", "-DADB_HOST=0"],
}

cc_defaults {
    name: "host_adbd_supported",
    defaults_visibility: [
        "//build/bazel/examples/soong_config_variables"
    ],
    host_supported: true,
    target: {
        linux: {
            enabled: true,
            host_ldlibs: [
                "-lresolv", // b64_pton
                "-lutil", // forkpty
            ],
        },
        darwin: {
            enabled: false,
        },
        windows: {
            enabled: false,
        },
    },
}
// 适配linux, libcore/JavaLibrary.bp
java_library {
    name: "core-generated-annotation-stubs",
    visibility: [
        "//art/build/sdk",
        "//build/soong/java/core-libraries",
    ],
    srcs: [
        ":openjdk_generated_annotation_stub_files",
    ],
    hostdex: true,
    sdk_version: "none",
    system_modules: "core-all-system-modules",
    patch_module: "java.base",
    installable: false,
    include_srcs: true,
}